#Notes

Binary Search: Divide the sorted array into 2 parts by finding the mid, check if the element exists in the left half or right half and return the index of the element found.

#Iterative
Binary search template:
Code implementation template:

def binary_search(arr, target):
  left = 0
  right = len(arr) - 1

  while left <= right:
    mid = left + ((right - left) // 2)
    if arr[mid] == target:
      #do something
      return
    if arr[mid] > target:
      right = mid - 1
    else:
      left = mid + 1
  return left
#TC: O(logN)
#SC: O(1)
============================================================================
  #Recursive
  def binary_search_recursive(arr, target, low, high):
    #base case for recursive
    if low > high:
      return -1
    mid = left + ((right - left) // 2)
    if arr[mid] == target:
      return mid
    elif arr[mid] > target:
      return binary_search_recursive(arr, target, low, mid - 1)
    else:
      return binary_search_recursive(arr, target, mid + 1, high)
#For recursive we use extra stack space so SC: O(logN)
============================================================================
   #Whenever low > high or high < low that means the element is not present in the array and for unsuccessful searches the TC: O(logN) as we do O(logN) iterations.
==============================================================================
